/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package dev.kit2512.oop_sms.presentation.views.DashboardView;

import dev.kit2512.oop_sms.domain.entities.StudentEntity;
import dev.kit2512.oop_sms.presentation.controllers.StudentListController;
import dev.kit2512.oop_sms.presentation.models.DashboardModel;
import dev.kit2512.oop_sms.presentation.views.AbstractView;
import dev.kit2512.oop_sms.presentation.views.InfoView.InforView;
import java.beans.PropertyChangeEvent;
import java.util.ArrayList;
import java.util.List;
import javax.inject.Inject;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author macpro13
 */
public class StudentListPanel extends javax.swing.JPanel implements AbstractView{

    private DefaultTableModel studentListTableModel;
    
    private StudentListController controller;

    /**
     * Creates new form StudentListPanel
     */
    @Inject
    public StudentListPanel(StudentListController controller ) {
        this.controller = controller;
        initTableModel();
        initComponents();
        addView();
        fetchStudentList();
    }

    public void fetchStudentList() {
        controller.elementFetchingStudentListChanged(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        studentListTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        addStudenBtn = new javax.swing.JButton();
        importExcelStudentBtn = new javax.swing.JButton();
        editStudentInfoBtn = new javax.swing.JButton();
        removeStudentBtn = new javax.swing.JButton();

        setBounds(new java.awt.Rectangle(0, 0, 300, 300));
        setName("Staff"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        studentListTable.setModel(studentListTableModel);
        studentListTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        studentListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(studentListTable);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        addStudenBtn.setText("Add student");
        jPanel1.add(addStudenBtn);

        importExcelStudentBtn.setText("Import from Excel");
        jPanel1.add(importExcelStudentBtn);

        editStudentInfoBtn.setText("Edit Information");
        jPanel1.add(editStudentInfoBtn);

        removeStudentBtn.setText("Remove");
        jPanel1.add(removeStudentBtn);

        add(jPanel1, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void onTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onTableMouseClicked
        if (evt.getClickCount() == 2) {
            final InforView inforView = new InforView();
            inforView.setVisible(true);    
        }
        
    }//GEN-LAST:event_onTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addStudenBtn;
    private javax.swing.JButton editStudentInfoBtn;
    private javax.swing.JButton importExcelStudentBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeStudentBtn;
    private javax.swing.JTable studentListTable;
    // End of variables declaration//GEN-END:variables

    private void initTableModel() {
        this.studentListTableModel = new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Major", "Gender", "Class", "Address", "Email", "Phone Number", "GPA"
            } 
        ){
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, false, true, false, true
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
    }

    @Override
    public void modelPropertyChange(PropertyChangeEvent event) {
        switch (event.getPropertyName()) {
            case DashboardModel.ERROR_MESSAGE_PROPERTY -> JOptionPane.showMessageDialog(this, (String) event.getNewValue(), "Error", 1);
            case DashboardModel.STUDENT_LIST_PROPERTY -> {
                this.studentListTableModel.setRowCount(0);
                final List<StudentEntity> studentList = (List<StudentEntity>) event.getNewValue();
                mapStudentModelToTableRow(studentList);
                this.studentListTable.setModel(this.studentListTableModel);
            }
        }
    }
    
    private void mapStudentModelToTableRow(List<StudentEntity> studentList) {
        for (StudentEntity student : studentList) {
            final List<Object> row = new ArrayList<>();
            row.add(student.getStudentFullId());
            row.add(student.getFullName());
            row.add(student.getMajor().getName());
            row.add(student.getUserGender() ? "Male" : "Female");
            row.add(student.getClassLetter());
            row.add(student.getUserAddress());
            row.add(student.getUserEmail());
            row.add(student.getUserPhone());
            row.add(student.getGPA());
            this.studentListTableModel.addRow(row.toArray());
        }
    }

    private void addView() {
        this.controller.addView(this);
    }
}
