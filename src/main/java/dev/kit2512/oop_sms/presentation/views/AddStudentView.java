/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package dev.kit2512.oop_sms.presentation.views;

import dev.kit2512.oop_sms.App;
import dev.kit2512.oop_sms.domain.entities.MajorEntity;
import dev.kit2512.oop_sms.presentation.controllers.AddStudentController;
import dev.kit2512.oop_sms.presentation.models.AddStudentModel;
import java.beans.PropertyChangeEvent;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.inject.Inject;
import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import net.sourceforge.jdatepicker.impl.JDatePanelImpl;
import net.sourceforge.jdatepicker.impl.JDatePickerImpl;
import net.sourceforge.jdatepicker.impl.UtilDateModel;

/**
 *
 * @author macpro13
 */
public class AddStudentView extends javax.swing.JDialog implements AbstractView {

    private final AddStudentController controller;

    private JDatePickerImpl datePicker;

    private DefaultComboBoxModel<MajorEntity> majorComoBoxModel;
    private DefaultComboBoxModel<Integer> yearOfAdmissionModel;
    private UtilDateModel datePickerModel;
    private JDatePanelImpl datePanel;

    /**
     * Creates new form NewJFrame
     */
    @Inject
    public AddStudentView(AddStudentController controller) {
        this.controller = controller;
        this.initMajorComoboxModel();
        this.initYearOfAdmissionComboBoxModel();
        initComponents();
        this.initTextFieldsListener();
        this.configDatePicker();
        this.configButtonGroup();
        this.setLocationRelativeTo(null);
        addView();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderGroup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        autoGenerateCheck = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        firstName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        middleName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        lastName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        majorCombo = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        yoaCombo = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        password = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        nextBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        classLetter = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        phone = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        email = new javax.swing.JTextField();
        dobPanel = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        male = new javax.swing.JRadioButton();
        female = new javax.swing.JRadioButton();
        jLabel13 = new javax.swing.JLabel();
        address = new javax.swing.JTextField();

        setTitle("Add Student");
        setModal(true);
        setName("Add Student"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Username");

        username.setEditable(false);
        username.setText("<Auto>");

        autoGenerateCheck.setSelected(true);
        autoGenerateCheck.setText("Auto-generate");
        autoGenerateCheck.addActionListener(evt -> autoGenerateCheckActionPerformed(evt));

        jLabel2.setText("First name");

        jLabel3.setText("Middle name");

        jLabel4.setText("Last name");

        jLabel5.setText("Major");

        majorCombo.setModel(majorComoBoxModel);
        majorCombo.addActionListener(evt -> majorComboActionPerformed(evt));

        jLabel6.setText("Year of admission");

        yoaCombo.setModel(yearOfAdmissionModel);
        yoaCombo.addActionListener(evt -> yoaComboActionPerformed(evt));

        jLabel7.setText("Class letter");

        jLabel8.setText("Date of birth");

        jLabel9.setText("Password");

        password.setEditable(false);
        password.setText("<Auto>");

        addBtn.setText("Add");
        addBtn.addActionListener(evt -> addBtnActionPerformed(evt));

        nextBtn.setText("Next");
        nextBtn.addActionListener(evt -> nextBtnActionPerformed(evt));

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(evt -> cancelBtnActionPerformed(evt));

        jLabel10.setText("Phone");

        jLabel11.setText("Email");

        dobPanel.setLayout(new javax.swing.BoxLayout(dobPanel, javax.swing.BoxLayout.LINE_AXIS));

        jLabel12.setText("Gender");

        male.setSelected(true);
        male.setText("Male");
        male.addActionListener(evt -> maleActionPerformed(evt));

        female.setText("Female");
        female.addActionListener(evt -> femaleActionPerformed(evt));

        jLabel13.setText("Address");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addBtn)
                        .addGap(18, 18, 18)
                        .addComponent(nextBtn)
                        .addGap(18, 18, 18)
                        .addComponent(cancelBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(phone)
                            .addComponent(address)
                            .addComponent(email)
                            .addComponent(yoaCombo, 0, 153, Short.MAX_VALUE)
                            .addComponent(majorCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(classLetter)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(44, 44, 44))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(autoGenerateCheck, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                            .addComponent(dobPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(male)
                            .addComponent(female)
                            .addComponent(firstName)
                            .addComponent(middleName)
                            .addComponent(lastName))))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(12, 12, 12)
                .addComponent(autoGenerateCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(firstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(middleName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dobPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jLabel12))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(male)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(female)))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(phone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(majorCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(yoaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(classLetter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn)
                    .addComponent(nextBtn)
                    .addComponent(cancelBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nextBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        this.controller.removeModel(App.appGraph.getDashboardModel());
        this.dispose();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void majorComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_majorComboActionPerformed

        final MajorEntity seletedMajorEntity = (MajorEntity) this.majorCombo.getSelectedItem();
        controller.elementSeletedMajorChanged(seletedMajorEntity);
    }//GEN-LAST:event_majorComboActionPerformed

    private void autoGenerateCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoGenerateCheckActionPerformed
        final Boolean newValue = this.autoGenerateCheck.isSelected();
        controller.elementAutoGenerateIDAndPasswordChange(newValue);
    }//GEN-LAST:event_autoGenerateCheckActionPerformed

    private void yoaComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yoaComboActionPerformed
        final Integer newValue = (Integer) this.yoaCombo.getSelectedItem();
        controller.elementYearOfAdmissionChanged(newValue);
    }//GEN-LAST:event_yoaComboActionPerformed

    private void maleActionPerformed(java.awt.event.ActionEvent evt) {                                     
        genderChanged();
    }//EN-LAST:event_maleActionPerformed

    private void femaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_femaleActionPerformed
        genderChanged();
    }//GEN-LAST:event_femaleActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        controller.removeModel(App.appGraph.getDashboardModel());
    }//GEN-LAST:event_formWindowClosing

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        controller.elementAddButtonActionPerformed(true);
        controller.elementStudentListShoudReload();
        this.dispose();
    }//GEN-LAST:event_addBtnActionPerformed

    private void genderChanged() {
        final JRadioButton value = (JRadioButton)this.genderGroup.getSelection();
        if (value.getText().equals("Male")) {
            controller.elementGenderChanged(true);
        } else {
            controller.elementGenderChanged(false);
        }
    }

    @Override
    public void modelPropertyChange(PropertyChangeEvent event) {
        final Object value = event.getNewValue();

        switch (event.getPropertyName()) {
            case AddStudentModel.AUTO_GENERATE_ID_PASSWORD_PROPERTY -> {
                final Boolean auto = (Boolean) event.getNewValue();
                if (auto) {
                    this.password.setEnabled(false);
                    this.username.setEnabled(false);
                }
                
                else {
                    this.password.setEnabled(true);
                    this.username.setEnabled(true);
                    this.password.setText("");
                    this.username.setText("");
                }
            }

            case AddStudentModel.AVAILABLE_MAJORS_PROPERTY -> {
                final List<MajorEntity> majors = (List<MajorEntity>) event.getNewValue();
                this.majorComoBoxModel.removeAllElements();
                this.majorComoBoxModel.addAll(majors);
                this.majorCombo.setModel(this.majorComoBoxModel);
            }

            case AddStudentModel.SELECTED_MAJOR_PROPERTY -> {
                final MajorEntity selectedMajor = (MajorEntity) event.getNewValue();
                this.majorCombo.setSelectedItem(selectedMajor);
            }

            case AddStudentModel.AVAILABLE_YEARS_OF_ADMISSION ->  {
                final Integer year = (Integer)value;
                final Integer currentYear = Calendar.getInstance().get(Calendar.YEAR);

                for (Integer i = year; i <= currentYear; i++) {
                    this.yearOfAdmissionModel.addElement(i);
                }
                this.yearOfAdmissionModel.setSelectedItem(year);
                this.yoaCombo.setModel(this.yearOfAdmissionModel);
            }

            case AddStudentModel.SHOULD_RESET ->  {
                final Boolean shouldReset = (Boolean) event.getNewValue();
                if (shouldReset) {
                     this.reset();
                }
                controller.elementStudentListShoudReload();
            }
            
            case AddStudentModel.SHOULD_CLOSE_PROPERTY -> {
                this.dispose();
                this.controller.removeModel(App.appGraph.getDashboardModel());
                this.controller.elementStudentListShoudReload();
            }

            case AddStudentModel.ERROR_MESSAGE_PROPERTY ->  {
                if (event.getNewValue() != null) {
                    JOptionPane.showMessageDialog(this, event.getNewValue(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    private void reset() {
        this.username.setText("");
        this.password.setText("");
        this.male.setSelected(true);
        this.firstName.setText(null);
        this.lastName.setText(null);
        this.middleName.setText(null);
        this.address.setText(null);
        this.datePickerModel.setValue(new Date());
        this.email.setText(null);
        this.classLetter.setText(null);
        this.majorComoBoxModel.removeAllElements();
        this.majorCombo.setModel(majorComoBoxModel);
        this.autoGenerateCheck.setSelected(true);
        this.phone.setText(null);
    }

    private void addView() {
        controller.addView(this);
        controller.getMajors();
    }

    private void initMajorComoboxModel() {
        this.majorComoBoxModel = new DefaultComboBoxModel<>();
    }

    private void initYearOfAdmissionComboBoxModel() {
        this.yearOfAdmissionModel = new DefaultComboBoxModel<>();
    }

    private void initTextFieldsListener() {
        this.email.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                this.listen(email.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                this.listen(email.getText());

            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                this.listen(email.getText());

            }

            private void listen(String newValue) {
                controller.elementEmailChanged(newValue);
            }
        });

        this.firstName.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                this.listen(firstName.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                this.listen(firstName.getText());

            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                this.listen(firstName.getText());

            }

            private void listen(String newValue) {
                controller.elementFirstNameChanged(newValue);
            }
        });

        this.lastName.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                this.listen(lastName.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                this.listen(lastName.getText());

            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                this.listen(lastName.getText());

            }

            private void listen(String newValue) {
                controller.elementLastNameChanged(newValue);
            }
        });

        this.middleName.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                this.listen(middleName.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                this.listen(middleName.getText());

            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                this.listen(middleName.getText());

            }

            private void listen(String newValue) {
                controller.elementMiddleNameChanged(newValue);
            }
        });

        this.phone.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                this.listen(phone.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                this.listen(phone.getText());

            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                this.listen(phone.getText());

            }

            private void listen(String newValue) {
                controller.elementPhoneChanged(newValue);
            }
        });


        this.username.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                this.listen(username.getSelectedText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                this.listen(username.getText());

            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                this.listen(username.getText());

            }

            private void listen(String newValue) {
                controller.elementUsernameChanged(newValue);
            }
        });

        this.password.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                this.listen(password.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                this.listen(password.getText());

            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                this.listen(password.getText());

            }

            private void listen(String newValue) {
                controller.elementPasswordChanged(newValue);
            }
        });

        this.address.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                this.listen(address.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                this.listen(address.getText());

            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                this.listen(address.getText());

            }

            private void listen(String newValue) {
                controller.elementAddressChanged(newValue);
            }
        });

        this.classLetter.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                this.listen(classLetter.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                this.listen(classLetter.getText());

            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                this.listen(classLetter.getText());

            }

            private void listen(String newValue) {
                controller.elementClassLetterChanged(newValue);
            }
        });
    }

    private void configDatePicker() {
        this.datePickerModel = new UtilDateModel();
        this.datePanel = new JDatePanelImpl(datePickerModel);
        datePicker = new JDatePickerImpl(datePanel);
        this.dobPanel.add(datePicker);
        datePicker.addActionListener((java.awt.event.ActionEvent evt) -> {
            final Date newValue = (Date) datePicker.getModel().getValue();
            controller.elementDateOfBirthNameChanged(newValue);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JTextField address;
    private javax.swing.JCheckBox autoGenerateCheck;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JTextField classLetter;
    private javax.swing.JPanel dobPanel;
    private javax.swing.JTextField email;
    private javax.swing.JRadioButton female;
    private javax.swing.JTextField firstName;
    private javax.swing.ButtonGroup genderGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField lastName;
    private javax.swing.JComboBox<MajorEntity> majorCombo;
    private javax.swing.JRadioButton male;
    private javax.swing.JTextField middleName;
    private javax.swing.JButton nextBtn;
    private javax.swing.JTextField password;
    private javax.swing.JTextField phone;
    private javax.swing.JTextField username;
    private javax.swing.JComboBox<Integer> yoaCombo;
    // End of variables declaration//GEN-END:variables

    private void configButtonGroup() {
        this.genderGroup.add(this.male);
        this.genderGroup.add(this.female);
    }
}
