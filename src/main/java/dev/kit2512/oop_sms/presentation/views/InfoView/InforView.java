/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package dev.kit2512.oop_sms.presentation.views.InfoView;
import dev.kit2512.oop_sms.domain.entities.StudentEntity;
import dev.kit2512.oop_sms.domain.entities.UserEntity;
import dev.kit2512.oop_sms.presentation.controllers.InfoController;
import dev.kit2512.oop_sms.presentation.models.InfoModel;
import dev.kit2512.oop_sms.presentation.views.AbstractView;
import java.beans.PropertyChangeEvent;
import javax.swing.JOptionPane;


/**
 *
 * @author h
 */

public class InforView extends javax.swing.JDialog implements AbstractView {
    private final InfoController controller;
    
    private UserInfoPanel userInfoPanel;
    
    private StudentInfoPanel studentInfoPanel;
    
    private StudentResultPanel studentResultPanel;
    
    private UserEntity userEntity = null;
    /**
     * Creates new form InforView
     * @param controller
     */
    
    public InforView(InfoController controller, Integer userId) {
        this.controller = controller;
        controller.addView(this);
        initComponents();
        this.addView();
        this.getUserInfo(userId);
        this.setLocationRelativeTo(null);
        this.setModal(true);
        this.setVisible(true);
    }
    
    public void getUserInfo(Integer userId) {
        controller.elementUserIdChanged(userId);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        if (userInfoPanel!=null) this.getContentPane().remove(this.userInfoPanel);
        if (studentResultPanel != null) this.getContentPane().remove(this.studentInfoPanel);
        if (studentResultPanel != null) this.getContentPane().remove(this.studentResultPanel);
        this.revalidate();
        this.setModal(false);
        this.dispose();
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param event
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void modelPropertyChange(PropertyChangeEvent event) {
        switch (event.getPropertyName()) {
            case InfoModel.USER_PROPERTY -> {
                this.userEntity = (UserEntity)event.getNewValue();
                this.userInfoPanel = new UserInfoPanel(this.userEntity);
                userInfoPanel.setBounds(5, 5, 400, 400);
                this.getContentPane().add(userInfoPanel);
                if (userEntity instanceof StudentEntity studentEntity) {
                    this.studentInfoPanel = new StudentInfoPanel(studentEntity);
                    studentInfoPanel.setBounds(405, 5, 400, 400);
                    this.getContentPane().add(studentInfoPanel);
                    this.studentResultPanel = new StudentResultPanel(studentEntity.getResults());
                    studentResultPanel.setBounds(810, 5, 400, 400);
                    this.getContentPane().add(studentResultPanel);
                } else {
                    this.getContentPane().remove(this.studentInfoPanel);
                    this.getContentPane().remove(this.studentResultPanel);
                }
                this.pack();
            }
            
            case InfoModel.ERROR_MESSAGE_PROPERTY -> {
                JOptionPane.showMessageDialog(this, "Unable to get user");
            }
            
            case InfoModel.CLOSE_PROPERTY -> {
                if (userInfoPanel!=null) this.getContentPane().remove(this.userInfoPanel);
                if (studentResultPanel != null) this.getContentPane().remove(this.studentInfoPanel);
                if (studentResultPanel != null) this.getContentPane().remove(this.studentResultPanel);
                this.dispose();
            }
        }
    }

    private void addView() {
        controller.addView(this);
    }
}
